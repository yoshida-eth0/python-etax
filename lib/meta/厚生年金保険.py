"""
抽象 社会保険 -> 厚生年金保険
"""
from abc import abstractmethod

from meta.社会保険 import I社会保険, 標準額区分
from utils import intfloor


class 厚生年金保険料率:
    def __init__(self, 厚生年金保険料率: float, 子ども子育て拠出金率: float):
        # 厚生年金保険料率(被保険者と事業主が折半)
        self.厚生年金保険料率 = 厚生年金保険料率

        # 子ども・子育て拠出金率(事業主が全額負担)
        self.子ども子育て拠出金率 = 子ども子育て拠出金率


class I厚生年金保険(I社会保険):
    """
    定数データの抽象クラス
    厚生年金保険 一般・坑内員・船員の被保険者の方

    参考：
        厚生年金保険の保険料｜日本年金機構
        https://www.nenkin.go.jp/service/kounen/hokenryo/hoshu/20150515-01.html
    """
    @abstractmethod
    def 標準報酬額区分(self, 報酬月額: int) -> 標準額区分:
        """
        報酬月額に対応する標準報酬額の区分を返す

        被保険者が受け取る給与（基本給のほか残業手当や通勤手当などを含めた税引き前の給与）を一定の幅で区分した報酬月額に当てはめて決定した標準報酬月額
        """
        ...

    def 標準賞与額区分(self, 賞与額: int) -> 標準額区分:
        """
        賞与額に対応する標準賞与額の区分を返す

        実際の税引き前の賞与の額から1千円未満の端数を切り捨てたもので、支給1回（同じ月に2回以上支給されたときは合算）につき、150万円が上限となります。
        年4回以上支給される賞与については、標準報酬月額の対象となる報酬とされ、標準賞与額の対象となる賞与とはされません。
        """
        賞与額 = intfloor(賞与額, 3)
        賞与額 = min(賞与額, 1_500_000)
        return 標準額区分(None, 賞与額)

    @property
    @abstractmethod
    def 保険料率(self) -> 厚生年金保険料率:
        """
        年に対応する厚生年金保険料率を返す
        """
        ...
