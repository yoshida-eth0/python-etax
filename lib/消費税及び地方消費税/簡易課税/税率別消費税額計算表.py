"""
消費税及び地方消費税
第４-(11)号様式 付表４－３ 税率別消費税額計算表　兼　地方消費税の課税標準となる消費税額計算表（簡易課税用）
"""
import math
from abc import abstractmethod

import pandas as pd
from utils import intfloor, ゼロ以上
from 消費税及び地方消費税.共通.課税売上高計算表 import 課税売上高計算表
from 消費税及び地方消費税.簡易課税.控除対象仕入税額等の計算表 import 控除対象仕入税額等の計算表, 控除対象仕入税額等の計算表_税率適用分

"""
みなし仕入率
"""

# 第1種（卸売業）
# 購入した商品を性質、形状を変更しないで、他の事業者に販売する事業をいいます。
みなし仕入率_卸売業 = 0.90

# 第2種（小売業等）
# 小売業（購入した商品を性質、形状を変更しないで、消費者に販売する事業）、農林漁業（飲食料品の譲渡に係る事業）をいいます。
# なお、製造小売業は第３種事業になります。
みなし仕入率_小売業等 = 0.80

# 第3種（製造業等）
# 農林漁業（飲食料品の譲渡に係る事業を除く）、鉱業、採石業、砂利採取業、建設業、製造業、製造小売業、電気・ガス・熱供給・水道業をいいます。
# なお、加工賃等の料金を受け取って役務を提供する事業は第４種事業になります。
みなし仕入率_製造業等 = 0.70

# 第4種（その他の事業）
# 第１種事業から第３種事業、第５種事業、第６種事業のいずれにも該当しない事業をいいます。例えば、飲食サービス業などが該当します。
# また、事業者が業務用固定資産を売却する場合も第４種事業に該当します。
みなし仕入率_その他の事業 = 0.60

# 第5種（サービス業等）
# 金融業、保険業、運輸業、情報通信業、サービス業（飲食サービス業に該当する事業を除く）をいいます。
みなし仕入率_サービス業等 = 0.50

# 第6種（不動産業）
# 不動産業（第１種事業から第３種事業及び第５種事業に該当する事業を除く）をいいます。
みなし仕入率_不動産業 = 0.40


"""
税率別消費税額計算表　兼　地方消費税の課税標準となる消費税額計算表
"""

class 税率別消費税額計算表_税率適用分:
    """
    第４-(11)号様式 付表４－３ 税率別消費税額計算表　兼　地方消費税の課税標準となる消費税額計算表
    税率ごとの列
    """
    def __init__(self, 国税率: float, 地方税率: float):
        self.国税率 = 国税率
        self.地方税率 = 地方税率
        self.合計税率 = round(国税率 + 地方税率, 3)
        self.label = f'税率{round(国税率*100, 2)}%適用分'

        # 控除対象仕入税額等の計算表_税率適用分 delegate
        self.delegate: 控除対象仕入税額等の計算表_税率適用分

        # 1-1. 課税資産の譲渡等の対価の額
        self.課税資産の譲渡等の対価の額: int = 0

        # 3. 貸倒回収に係る消費税額
        self.回収した貸倒債権の合計額: int = 0

        # 5. 控除税額 -> 返還等対価に係る税額
        self.課税売上げに係る返品_値引き_割戻しの金額: int = 0

        # 6. 控除税額 -> 貸倒れに係る税額
        self.控除税額_貸倒れに係る税額: int = 0

    @property
    def 課税標準額(self) -> int:
        """
        1. 課税標準額
        """
        return intfloor(self.課税資産の譲渡等の対価の額, 3)

    @property
    def 消費税額(self) -> int:
        """
        2. 消費税額
        """
        return math.floor(self.課税標準額 * self.国税率)

    @property
    def 貸倒回収に係る消費税額(self) -> int:
        """
        3. 貸倒回収に係る消費税額
        """
        return math.floor(self.回収した貸倒債権の合計額 * self.国税率 / (1 + self.合計税率) / 100)

    @property
    @abstractmethod
    def 控除税額_控除対象仕入税額(self) -> int:
        """
        4. 控除税額 -> 控除対象仕入税額
        """
        return self.delegate.控除対象仕入税額

    @property
    def 控除税額_返還等対価に係る税額(self) -> int:
        """
        5. 控除税額 -> 返還等対価に係る税額
        """
        return math.floor(self.課税売上げに係る返品_値引き_割戻しの金額 * self.国税率 / (1 + self.合計税率) / 100)

    @property
    def 控除税額_控除税額小計(self) -> int:
        """
        7. 控除税額 -> 控除税額小計
        """
        return self.控除税額_控除対象仕入税額 + self.控除税額_返還等対価に係る税額 + self.控除税額_貸倒れに係る税額

    def to_dataframe(self) -> pd.DataFrame:
        """
        DataFrameに変換
        """
        return pd.DataFrame([
            ['1', '課税標準額', None, self.課税標準額],
            ['1-1', '課税資産の譲渡等の対価の額', None, self.課税資産の譲渡等の対価の額],
            ['2', '消費税額', None, self.消費税額],
            ['3', '貸倒回収に係る消費税額', None, self.貸倒回収に係る消費税額],
            ['4', '控除税額', '控除対象仕入税額', self.控除税額_控除対象仕入税額],
            ['5', '控除税額', '返還等対価に係る税額', self.控除税額_返還等対価に係る税額],
            ['6', '控除税額', '貸倒れに係る税額', self.控除税額_貸倒れに係る税額],
            ['7', '控除税額', '控除税額小計', self.控除税額_控除税額小計],
        ], columns=['key', 'label1', 'label2', self.label])


class 税率別消費税額計算表_合計:
    """
    第４-(11)号様式 付表４－３ 税率別消費税額計算表　兼　地方消費税の課税標準となる消費税額計算表
    各税率列の合計
    """
    def __init__(self, 税率適用分一覧: list[税率別消費税額計算表_税率適用分], 地方税比率: float):
        self.税率適用分一覧 = 税率適用分一覧
        self.地方税比率 = 地方税比率

    @property
    def 課税標準額(self) -> int:
        """
        1. 課税標準額
        """
        return sum([v.課税標準額 for v in self.税率適用分一覧])

    @property
    def 課税資産の譲渡等の対価の額(self) -> int:
        """
        1-1. 課税資産の譲渡等の対価の額
        """
        return sum([v.課税資産の譲渡等の対価の額 for v in self.税率適用分一覧])

    @property
    def 消費税額(self) -> int:
        """
        2. 消費税額
        """
        return sum([v.消費税額 for v in self.税率適用分一覧])

    @property
    def 貸倒回収に係る消費税額(self) -> int:
        """
        3. 貸倒回収に係る消費税額
        """
        return sum([v.貸倒回収に係る消費税額 for v in self.税率適用分一覧])

    @property
    def 控除税額_控除対象仕入税額(self) -> int:
        """
        4. 控除税額 -> 控除対象仕入税額
        """
        return sum([v.控除税額_控除対象仕入税額 for v in self.税率適用分一覧])

    @property
    def 控除税額_返還等対価に係る税額(self) -> int:
        """
        5. 控除税額 -> 返還等対価に係る税額
        """
        return sum([v.控除税額_返還等対価に係る税額 for v in self.税率適用分一覧])

    @property
    def 控除税額_貸倒れに係る税額(self) -> int:
        """
        6. 控除税額 -> 貸倒れに係る税額
        """
        return sum([v.控除税額_貸倒れに係る税額 for v in self.税率適用分一覧])

    @property
    def 控除税額_控除税額小計(self) -> int:
        """
        7. 控除税額 -> 控除税額小計
        """
        return sum([v.控除税額_控除税額小計 for v in self.税率適用分一覧])

    @property
    @ゼロ以上
    def 控除不足還付税額(self) -> int:
        """
        8. 控除不足還付税額
        """
        return self.控除税額_控除税額小計 - self.消費税額 - self.貸倒回収に係る消費税額

    @property
    def 差引税額(self) -> int:
        """
        9. 差引税額
        """
        return intfloor(self.消費税額 + self.貸倒回収に係る消費税額 - self.控除税額_控除税額小計, 2)

    @property
    def 地方消費税の課税標準となる消費税額_控除不足還付税額(self) -> int:
        """
        10. 地方消費税の課税標準となる消費税額 -> 控除不足還付税額
        """
        return self.控除不足還付税額

    @property
    def 地方消費税の課税標準となる消費税額_差引税額(self) -> int:
        """
        11. 地方消費税の課税標準となる消費税額 -> 差引税額
        """
        return self.差引税額

    @property
    def 譲渡割額_還付額(self) -> int:
        """
        12. 譲渡割額 -> 還付額
        """
        return math.floor(self.地方消費税の課税標準となる消費税額_控除不足還付税額 * self.地方税比率)

    @property
    def 譲渡割額_納税額(self) -> int:
        """
        13. 譲渡割額 -> 納税額
        """
        return math.floor(self.地方消費税の課税標準となる消費税額_差引税額 * self.地方税比率)

    def to_dataframe(self) -> pd.DataFrame:
        """
        DataFrameに変換
        """
        return pd.DataFrame([
            ['1', '課税標準額', None, self.課税標準額],
            ['1-1', '課税資産の譲渡等の対価の額', None, self.課税資産の譲渡等の対価の額],
            ['2', '消費税額', None, self.消費税額],
            ['3', '貸倒回収に係る消費税額', None, self.貸倒回収に係る消費税額],
            ['4', '控除税額', '控除対象仕入税額', self.控除税額_控除対象仕入税額],
            ['5', '控除税額', '返還等対価に係る税額', self.控除税額_返還等対価に係る税額],
            ['6', '控除税額', '貸倒れに係る税額', self.控除税額_貸倒れに係る税額],
            ['7', '控除税額', '控除税額小計', self.控除税額_控除税額小計],
            ['8', '控除不足還付税額', None, self.控除不足還付税額],
            ['9', '差引税額', None, self.差引税額],
            ['10', '地方消費税の課税標準となる消費税額', '控除不足還付税額', self.地方消費税の課税標準となる消費税額_控除不足還付税額],
            ['11', '地方消費税の課税標準となる消費税額', '差引税額', self.地方消費税の課税標準となる消費税額_差引税額],
            ['12', '譲渡割額', '還付額', self.譲渡割額_還付額],
            ['13', '譲渡割額', '納税額', self.譲渡割額_納税額],
        ], columns=['key', 'label1', 'label2', '合計'])


class 税率別消費税額計算表:
    """
    税率別消費税額計算表　兼　地方消費税の課税標準となる消費税額計算表

    参考：
        付表4-3 税率別消費税額計算表 兼 地方消費税の課税標準となる消費税額計算表
        https://www.nta.go.jp/taxes/tetsuzuki/shinsei/shinkoku/shohi/06_pdf/4-3.pdf

        令和６年分　消費税及び地方消費税の確定申告の手引き　個人事業者用（簡易課税用） ｜国税庁
        https://www.nta.go.jp/publication/pamph/shohi_kojin/r06/02.htm

        消費税及び地方消費税の申告書（簡易課税用）の書き方
        https://www.nta.go.jp/publication/pamph/shohi/kaisei/yoshiki/pdf/202008_02.pdf
    """
    def __init__(self, 課税売上高計算表: 課税売上高計算表, 控除対象仕入税額等の計算表: 控除対象仕入税額等の計算表):
        # 税率別消費税額計算表
        self.税率6_24per適用分 = 税率別消費税額計算表_税率適用分(0.0624, 0.0176)
        self.税率7_8per適用分 = 税率別消費税額計算表_税率適用分(0.078, 0.022)
        self.税率適用分一覧 = [self.税率6_24per適用分, self.税率7_8per適用分]
        self.合計 = 税率別消費税額計算表_合計(self.税率適用分一覧, 22/78)

        # 控除対象仕入税額等の計算表
        self.控除対象仕入税額等の計算表 = 控除対象仕入税額等の計算表
        控除対象仕入税額等の計算表.setup(self.税率適用分一覧)

        # 課税売上高計算表から税率別消費税額計算表に反映
        self.税率6_24per適用分.課税資産の譲渡等の対価の額 = 課税売上高計算表.課税資産の譲渡等の対価の額の計算_軽減税率適用分
        self.税率7_8per適用分.課税資産の譲渡等の対価の額 = 課税売上高計算表.課税資産の譲渡等の対価の額の計算_標準税率適用分

    def to_dataframe(self) -> pd.DataFrame:
        """
        DataFrameに変換
        """
        df = self.合計.to_dataframe().set_index('key')

        for x税率適用分 in self.税率適用分一覧:
            df2 = x税率適用分.to_dataframe().set_index('key')
            df[x税率適用分.label] = df2[x税率適用分.label]

        # columns
        columns = ['key', 'label1', 'label2']
        columns += [x税率適用分.label for x税率適用分 in self.税率適用分一覧]
        columns += ['合計']

        return df.reset_index()[columns]
