"""
消費税及び地方消費税
第４-(12)号様式 付表５－３ 控除対象仕入税額等の計算表（簡易課税用）
1種類の事業の専業者

参考：
    第４-(12)号様式 付表５－３ 控除対象仕入税額等の計算表（簡易課税用）
    https://www.nta.go.jp/taxes/tetsuzuki/shinsei/shinkoku/shohi/06_pdf/5-3.pdf
"""

import math

import pandas as pd
from 消費税及び地方消費税.簡易課税.控除対象仕入税額等の計算表 import 控除対象仕入税額等の計算表
from 消費税及び地方消費税.簡易課税.税率別消費税額計算表 import 税率別消費税額計算表_税率適用分


class 控除対象仕入税額等の計算表_1種類の事業の専業者_税率適用分:
    """
    控除対象仕入税額等の計算表 1種類の事業の専業者
    税率ごとの列
    """
    def __init__(self, 税率別消費税額計算表_税率適用分: 税率別消費税額計算表_税率適用分, みなし仕入率: float):
        self.税率別消費税額計算表_税率適用分 = 税率別消費税額計算表_税率適用分
        self.みなし仕入率 = みなし仕入率

        # delegate
        税率別消費税額計算表_税率適用分.delegate = self

    @property
    def 課税標準額に対する消費税額(self) -> int:
        """
        I 控除対象仕入税額の計算の基礎となる消費税額
        1. 課税標準額に対する消費税額
        """
        return self.税率別消費税額計算表_税率適用分.消費税額

    @property
    def 貸倒回収に係る消費税額(self) -> int:
        """
        I 控除対象仕入税額の計算の基礎となる消費税額
        2. 貸倒回収に係る消費税額
        """
        return self.税率別消費税額計算表_税率適用分.貸倒回収に係る消費税額

    @property
    def 売上対価の返還等に係る消費税額(self) -> int:
        """
        I 控除対象仕入税額の計算の基礎となる消費税額
        3. 売上対価の返還等に係る消費税額
        """
        return self.税率別消費税額計算表_税率適用分.控除税額_返還等対価に係る税額

    @property
    def 控除対象仕入税額の計算の基礎となる消費税額(self) -> int:
        """
        I 控除対象仕入税額の計算の基礎となる消費税額
        4. 控除対象仕入税額の計算の基礎となる消費税額
        """
        return self.課税標準額に対する消費税額 + self.貸倒回収に係る消費税額 - self.売上対価の返還等に係る消費税額

    @property
    def _1種類の事業の専業者の場合の控除対象仕入税額(self) -> int:
        """
        II 1種類の事業の専業者の場合の控除対象仕入税額
        5. 1種類の事業の専業者の場合の控除対象仕入税額
        """
        return math.floor(self.控除対象仕入税額の計算の基礎となる消費税額 * self.みなし仕入率)

    @property
    def 控除対象仕入税額(self) -> int:
        """
        delegate
        控除対象仕入税額
        """
        return self._1種類の事業の専業者の場合の控除対象仕入税額

    def to_dataframe(self) -> pd.DataFrame:
        """
        DataFrameに変換
        """
        return pd.DataFrame([
            ['1', '控除対象仕入税額の計算の基礎となる消費税額', '課税標準額に対する消費税額', self.課税標準額に対する消費税額],
            ['2', '控除対象仕入税額の計算の基礎となる消費税額', '貸倒回収に係る消費税額', self.貸倒回収に係る消費税額],
            ['3', '控除対象仕入税額の計算の基礎となる消費税額', '売上対価の返還等に係る消費税額', self.売上対価の返還等に係る消費税額],
            ['4', '控除対象仕入税額の計算の基礎となる消費税額', '控除対象仕入税額の計算の基礎となる消費税額', self.控除対象仕入税額の計算の基礎となる消費税額],
            ['5', '1種類の事業の専業者の場合の控除対象仕入税額', '1種類の事業の専業者の場合の控除対象仕入税額', self._1種類の事業の専業者の場合の控除対象仕入税額],
        ], columns=['key', 'label1', 'label2', self.税率別消費税額計算表_税率適用分.label])


class 控除対象仕入税額等の計算表_1種類の事業の専業者_合計:
    """
    控除対象仕入税額等の計算表 1種類の事業の専業者
    各税率列の合計
    """
    def __init__(self, 税率適用分一覧: list[控除対象仕入税額等の計算表_1種類の事業の専業者_税率適用分]):
        self.税率適用分一覧 = 税率適用分一覧

    @property
    def 課税標準額に対する消費税額(self) -> int:
        """
        I 控除対象仕入税額の計算の基礎となる消費税額
        1. 課税標準額に対する消費税額
        """
        return sum([v.課税標準額に対する消費税額 for v in self.税率適用分一覧])

    @property
    def 貸倒回収に係る消費税額(self) -> int:
        """
        I 控除対象仕入税額の計算の基礎となる消費税額
        2. 貸倒回収に係る消費税額
        """
        return sum([v.貸倒回収に係る消費税額 for v in self.税率適用分一覧])

    @property
    def 売上対価の返還等に係る消費税額(self) -> int:
        """
        I 控除対象仕入税額の計算の基礎となる消費税額
        3. 売上対価の返還等に係る消費税額
        """
        return sum([v.売上対価の返還等に係る消費税額 for v in self.税率適用分一覧])

    @property
    def 控除対象仕入税額の計算の基礎となる消費税額(self) -> int:
        """
        I 控除対象仕入税額の計算の基礎となる消費税額
        4. 控除対象仕入税額の計算の基礎となる消費税額
        """
        return sum([v.控除対象仕入税額の計算の基礎となる消費税額 for v in self.税率適用分一覧])

    @property
    def _1種類の事業の専業者の場合の控除対象仕入税額(self) -> int:
        """
        II 1種類の事業の専業者の場合の控除対象仕入税額
        5. 1種類の事業の専業者の場合の控除対象仕入税額
        """
        return sum([v._1種類の事業の専業者の場合の控除対象仕入税額 for v in self.税率適用分一覧])

    def to_dataframe(self) -> pd.DataFrame:
        """
        DataFrameに変換
        """
        return pd.DataFrame([
            ['1', '控除対象仕入税額の計算の基礎となる消費税額', '課税標準額に対する消費税額', self.課税標準額に対する消費税額],
            ['2', '控除対象仕入税額の計算の基礎となる消費税額', '貸倒回収に係る消費税額', self.貸倒回収に係る消費税額],
            ['3', '控除対象仕入税額の計算の基礎となる消費税額', '売上対価の返還等に係る消費税額', self.売上対価の返還等に係る消費税額],
            ['4', '控除対象仕入税額の計算の基礎となる消費税額', '控除対象仕入税額の計算の基礎となる消費税額', self.控除対象仕入税額の計算の基礎となる消費税額],
            ['5', '1種類の事業の専業者の場合の控除対象仕入税額', '1種類の事業の専業者の場合の控除対象仕入税額', self._1種類の事業の専業者の場合の控除対象仕入税額],
        ], columns=['key', 'label1', 'label2', '合計'])


class 控除対象仕入税額等の計算表_1種類の事業の専業者(控除対象仕入税額等の計算表):
    """
    控除対象仕入税額等の計算表 1種類の事業の専業者
    """
    def __init__(self, みなし仕入率: float):
        self.みなし仕入率 = みなし仕入率

    def setup(self,税率別消費税額計算表_税率適用分一覧: list[税率別消費税額計算表_税率適用分]):
        # 税率別消費税額計算表
        self.税率別消費税額計算表_税率適用分一覧 = 税率別消費税額計算表_税率適用分一覧

        # 控除対象仕入税額等の計算表
        self.税率適用分一覧 = [控除対象仕入税額等の計算表_1種類の事業の専業者_税率適用分(v, self.みなし仕入率) for v in 税率別消費税額計算表_税率適用分一覧]
        self.合計 = 控除対象仕入税額等の計算表_1種類の事業の専業者_合計(self.税率適用分一覧)

    def to_dataframe(self) -> int:
        """
        DataFrameに変換
        """
        df = pd.DataFrame(columns=['key', 'label1', 'label2'])
        for x税率適用分 in self.税率適用分一覧:
            df = pd.merge(df, x税率適用分.to_dataframe(), on=['key', 'label1', 'label2'], how='outer')
        df = pd.merge(df, self.合計.to_dataframe(), on=['key', 'label1', 'label2'], how='outer')
        return df
